#!/opt/python3/bin/python3
# @@ AVID HEADER - DO NOT EDIT @@
# Copyright 2013 by Avid Technology, Inc.
# @@ AVID HEADER @@
"""
# ui/compile_ui.py
"""
import os
from PyQt4 import uic


class CCompileUi(object):
    """
    # This class is used to build UI, from xml files generated by Qt designer.
    """
    # compileUi(uifile, pyfile[, execute=False[, indent=4[, pyqt3_wrapper=False[, from_imports=False[, resource_suffix='_rc']]]]])
    #Parameters:
    #uifile - the file name or file-like object containing the .ui file.
    #pyfile - the file-like object to which the generated Python code will be written to.
    #execute - is optionally set if a small amount of additional code is to be generated
    #         that will display the user interface if the code is run as a #standalone application.
    #indent - the optional number of spaces used for indentation in the generated code.
    #         If it is zero then a tab character is used instead.
    #pyqt3_wrapper _ is optionally set if a small wrapper is to be generated
    #         that allows the generated code to be used as it is by PyQt v3 #applications.
    #from_imports - is optionally set to generate import statements that are relative to '.'.
    #         At the moment this only applies to the import of resource modules.    
    builds = [{'uifile': ['configtd2_main.ui', 'configtd2_copy_dialog.ui'],
               'pyfile': 'ConfigTdUi.py',
               'indent': 4,
               'execute': False}]

    def run(self):

        for build in self.builds:

            with open(build['pyfile'], 'w', newline='\n') as pyfile:
                pyfile.write("#!/opt/python3/bin/python3\n"
                             "# @@ AVID HEADER - DO NOT EDIT @@\n"
                             "# Copyright 2013-2014 by Avid Technology, Inc.\n"
                             "# @@ AVID HEADER @@\n\n")

                for ui_file in build['uifile']:
                    uic.compileUi( ui_file,
                                   pyfile,
                                   execute=build['execute'],
                                   indent=build['indent'])

if __name__ == '__main__':
    compiler = CCompileUi()
    compiler.run()