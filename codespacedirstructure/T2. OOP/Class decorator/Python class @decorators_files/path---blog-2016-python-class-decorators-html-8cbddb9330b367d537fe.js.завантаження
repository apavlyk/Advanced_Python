webpackJsonp([77167793119038],{725:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Krzysztof Żuraw Blog",author:"Krzysztof Żuraw"}},markdownRemark:{id:"/opt/build/repo/src/pages/2016-01-29-decorators/index.md absPath of file >>> MarkdownRemark",html:'<p><strong>Today post will be about syntactic sugar of python\nlanguage-decorators.I will concentrate on class decorators.</strong></p>\n<p>Let’s start with basic example of decorator defined by class in\n<code>example_1</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">decorator</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func\n\n    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'Called {func} with args: {args}\'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>func<span class="token operator">=</span>self<span class="token punctuation">.</span>func<span class="token punctuation">.</span>func_name<span class="token punctuation">,</span>\n                                                       args<span class="token operator">=</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>\n\n@decorator\n<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">,</span>y\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">\'__main__\'</span><span class="token punctuation">:</span>\n    func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>So running it results in:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>$ python example_1.py\nCalled func with args: <span class="token punctuation">(</span>1, 2<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>But there is another special method that can be used in such cases:\n<code>__get__</code>. This is used for example in implementation of\n<a href="https://github.com/django/django/blob/master/django/utils/functional.py#L19">cached_property</a>\ndecorator in django.</p>\n<p>Let’s look onto <code>example_2</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">property_</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func\n        self<span class="token punctuation">.</span>name <span class="token operator">=</span> func<span class="token punctuation">.</span>__name__\n\n    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>\n            <span class="token string">\'Called property from {instance} \'</span><span class="token punctuation">,</span>\n            <span class="token string">\'of {klass}\'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>instance<span class="token operator">=</span>instance<span class="token punctuation">,</span> klass<span class="token operator">=</span>cls<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>func<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>\n\n    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>\n            <span class="token string">\'Setting up {value} \'</span>\n            <span class="token string">\'for {obj}\'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>value<span class="token operator">=</span>value<span class="token punctuation">,</span> obj<span class="token operator">=</span>obj<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n        <span class="token punctuation">[</span>setattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> value<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n    @property_\n    <span class="token keyword">def</span> <span class="token function">get_color</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'Accessing get_color property\'</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token string">\'red\'</span>\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">\'__main__\'</span><span class="token punctuation">:</span>\n    apple <span class="token operator">=</span> Apple<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>get_color<span class="token punctuation">)</span>\n    apple<span class="token punctuation">.</span>get_color <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'shape\'</span><span class="token punctuation">:</span><span class="token string">\'triangle\'</span><span class="token punctuation">}</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>What is happening here? Instead of implementing <code>__call__</code> we got access\nto get the certain attribute. It’s useful when we want to implement\nlogic to e.g properties. Here I implemented full descriptor. Running\nthis example results is this output:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>$ python example_2.py\nCalled property from <span class="token operator">&lt;</span>__main__.Apple object at 0x7ff05de056d0<span class="token operator">></span> of <span class="token operator">&lt;</span>class <span class="token string">\'__main__.Apple\'</span><span class="token operator">></span>\nAccessing get_color property\nred\nSetting up <span class="token punctuation">{</span><span class="token string">\'shape\'</span><span class="token keyword">:</span> <span class="token string">\'triangle\'</span><span class="token punctuation">}</span> <span class="token keyword">for</span> <span class="token operator">&lt;</span>__main__.Apple object at 0x7ff05de056d0<span class="token operator">></span>\ntriangle\nDeleting <span class="token operator">&lt;</span>__main__.Apple object at 0x7ff05de056d0<span class="token operator">></span>\n</code></pre>\n      </div>\n<p>You can also decorate classes and functions at the same time. Consider\n<code>example_3.py</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'Called {}\'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> wrapper\n\n@decorator\n<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>\n\n<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    @decorator\n    <span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">\'__main__\'</span><span class="token punctuation">:</span>\n    c <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    c<span class="token punctuation">.</span>method<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>\n    func<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Running this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>$ python example_3.py\nCalled <span class="token punctuation">(</span><span class="token operator">&lt;</span>__main__.C object at 0x7f28ce438590<span class="token operator">></span>, 1, 2<span class="token punctuation">)</span>\nCalled <span class="token punctuation">(</span>3, 4<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Here the decorator wraps either class or function. In the first case\ntuple with args contains only variables passed to the unction. In the\nclass call in args, there is also an instance of C class.</p>\n<p>It’s also possible to decorate whole classes, like in example_4:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">class</span> <span class="token class-name">Wrapper</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            self<span class="token punctuation">.</span>wrapped <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>\n\n        <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'Getting the {} of {}\'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>wrapped<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>wrapped<span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> Wrapper\n\n@decorator\n<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x\n        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">\'__main__\'</span><span class="token punctuation">:</span>\n    x <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>x<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Output of <code>example\\_4</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code>$ python example_4.py\nGetting the x of <span class="token operator">&lt;</span>__main__.C object at 0x7fed2468f750<span class="token operator">></span>\n1\n</code></pre>\n      </div>\n<p>In this example, the class Wrapper on <code>__init__</code> calls the class with\nargs and store it under <code>self.wrapped</code>. So <code>cls(*args)</code> is the same as\n<code>C(1,2)</code>.</p>\n<p>Most of this examples are taken from book <a href="http://www.amazon.com/gp/product/1449355730?keywords=learning%20python%205th%20edition&#x26;qid=1454103755&#x26;ref_=sr_1_1&#x26;sr=8-1">Learning Python 5th\nEdition</a>\nby Mark Lutz.</p>',frontmatter:{title:"Python class @decorators",tags:["python","classes","decorators"],date:"January 29, 2016",readNext:null,readPrev:null}}},pathContext:{slug:"/blog/2016/python-class-decorators.html"}}}});
//# sourceMappingURL=path---blog-2016-python-class-decorators-html-8cbddb9330b367d537fe.js.map